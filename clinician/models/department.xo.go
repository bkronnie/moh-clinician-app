package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Department represents a row from 'public.departments'.
type Department struct {
	ID    int            `json:"id"`     // id
	DName sql.NullString `json:"d_name"` // d_name
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Department] exists in the database.
func (d *Department) Exists() bool {
	return d._exists
}

// Deleted returns true when the [Department] has been marked for deletion
// from the database.
func (d *Department) Deleted() bool {
	return d._deleted
}

// Insert inserts the [Department] to the database.
func (d *Department) Insert(ctx context.Context, db DB) error {
	switch {
	case d._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case d._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.departments (` +
		`d_name` +
		`) VALUES (` +
		`$1` +
		`) RETURNING id`
	// run
	logf(sqlstr, d.DName)
	if err := db.QueryRowContext(ctx, sqlstr, d.DName).Scan(&d.ID); err != nil {
		return logerror(err)
	}
	// set exists
	d._exists = true
	return nil
}

// Update updates a [Department] in the database.
func (d *Department) Update(ctx context.Context, db DB) error {
	switch {
	case !d._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case d._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.departments SET ` +
		`d_name = $1 ` +
		`WHERE id = $2`
	// run
	logf(sqlstr, d.DName, d.ID)
	if _, err := db.ExecContext(ctx, sqlstr, d.DName, d.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Department] to the database.
func (d *Department) Save(ctx context.Context, db DB) error {
	if d.Exists() {
		return d.Update(ctx, db)
	}
	return d.Insert(ctx, db)
}

// Upsert performs an upsert for [Department].
func (d *Department) Upsert(ctx context.Context, db DB) error {
	switch {
	case d._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.departments (` +
		`id, d_name` +
		`) VALUES (` +
		`$1, $2` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`d_name = EXCLUDED.d_name `
	// run
	logf(sqlstr, d.ID, d.DName)
	if _, err := db.ExecContext(ctx, sqlstr, d.ID, d.DName); err != nil {
		return logerror(err)
	}
	// set exists
	d._exists = true
	return nil
}

// Delete deletes the [Department] from the database.
func (d *Department) Delete(ctx context.Context, db DB) error {
	switch {
	case !d._exists: // doesn't exist
		return nil
	case d._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.departments ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, d.ID)
	if _, err := db.ExecContext(ctx, sqlstr, d.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	d._deleted = true
	return nil
}

// DepartmentByID retrieves a row from 'public.departments' as a [Department].
//
// Generated from index 'departments_pkey'.
func DepartmentByID(ctx context.Context, db DB, id int) (*Department, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, d_name ` +
		`FROM public.departments ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	d := Department{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&d.ID, &d.DName); err != nil {
		return nil, logerror(err)
	}
	return &d, nil
}
