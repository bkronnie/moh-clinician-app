package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Right represents a row from 'public.rights'.
type Right struct {
	ID     int            `json:"id"`     // id
	Rights sql.NullString `json:"rights"` // rights
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Right] exists in the database.
func (r *Right) Exists() bool {
	return r._exists
}

// Deleted returns true when the [Right] has been marked for deletion
// from the database.
func (r *Right) Deleted() bool {
	return r._deleted
}

// Insert inserts the [Right] to the database.
func (r *Right) Insert(ctx context.Context, db DB) error {
	switch {
	case r._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case r._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.rights (` +
		`rights` +
		`) VALUES (` +
		`$1` +
		`) RETURNING id`
	// run
	logf(sqlstr, r.Rights)
	if err := db.QueryRowContext(ctx, sqlstr, r.Rights).Scan(&r.ID); err != nil {
		return logerror(err)
	}
	// set exists
	r._exists = true
	return nil
}

// Update updates a [Right] in the database.
func (r *Right) Update(ctx context.Context, db DB) error {
	switch {
	case !r._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case r._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.rights SET ` +
		`rights = $1 ` +
		`WHERE id = $2`
	// run
	logf(sqlstr, r.Rights, r.ID)
	if _, err := db.ExecContext(ctx, sqlstr, r.Rights, r.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Right] to the database.
func (r *Right) Save(ctx context.Context, db DB) error {
	if r.Exists() {
		return r.Update(ctx, db)
	}
	return r.Insert(ctx, db)
}

// Upsert performs an upsert for [Right].
func (r *Right) Upsert(ctx context.Context, db DB) error {
	switch {
	case r._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.rights (` +
		`id, rights` +
		`) VALUES (` +
		`$1, $2` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`rights = EXCLUDED.rights `
	// run
	logf(sqlstr, r.ID, r.Rights)
	if _, err := db.ExecContext(ctx, sqlstr, r.ID, r.Rights); err != nil {
		return logerror(err)
	}
	// set exists
	r._exists = true
	return nil
}

// Delete deletes the [Right] from the database.
func (r *Right) Delete(ctx context.Context, db DB) error {
	switch {
	case !r._exists: // doesn't exist
		return nil
	case r._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.rights ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, r.ID)
	if _, err := db.ExecContext(ctx, sqlstr, r.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	r._deleted = true
	return nil
}

// RightByID retrieves a row from 'public.rights' as a [Right].
//
// Generated from index 'rights_pkey'.
func RightByID(ctx context.Context, db DB, id int) (*Right, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, rights ` +
		`FROM public.rights ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	r := Right{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&r.ID, &r.Rights); err != nil {
		return nil, logerror(err)
	}
	return &r, nil
}
