package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Employeeright represents a row from 'public.employeerights'.
type Employeeright struct {
	ID       int           `json:"id"`       // id
	Employee sql.NullInt64 `json:"employee"` // employee
	Rights   sql.NullInt64 `json:"rights"`   // rights
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Employeeright] exists in the database.
func (e *Employeeright) Exists() bool {
	return e._exists
}

// Deleted returns true when the [Employeeright] has been marked for deletion
// from the database.
func (e *Employeeright) Deleted() bool {
	return e._deleted
}

// Insert inserts the [Employeeright] to the database.
func (e *Employeeright) Insert(ctx context.Context, db DB) error {
	switch {
	case e._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case e._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.employeerights (` +
		`employee, rights` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING id`
	// run
	logf(sqlstr, e.Employee, e.Rights)
	if err := db.QueryRowContext(ctx, sqlstr, e.Employee, e.Rights).Scan(&e.ID); err != nil {
		return logerror(err)
	}
	// set exists
	e._exists = true
	return nil
}

// Update updates a [Employeeright] in the database.
func (e *Employeeright) Update(ctx context.Context, db DB) error {
	switch {
	case !e._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case e._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.employeerights SET ` +
		`employee = $1, rights = $2 ` +
		`WHERE id = $3`
	// run
	logf(sqlstr, e.Employee, e.Rights, e.ID)
	if _, err := db.ExecContext(ctx, sqlstr, e.Employee, e.Rights, e.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Employeeright] to the database.
func (e *Employeeright) Save(ctx context.Context, db DB) error {
	if e.Exists() {
		return e.Update(ctx, db)
	}
	return e.Insert(ctx, db)
}

// Upsert performs an upsert for [Employeeright].
func (e *Employeeright) Upsert(ctx context.Context, db DB) error {
	switch {
	case e._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.employeerights (` +
		`id, employee, rights` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`employee = EXCLUDED.employee, rights = EXCLUDED.rights `
	// run
	logf(sqlstr, e.ID, e.Employee, e.Rights)
	if _, err := db.ExecContext(ctx, sqlstr, e.ID, e.Employee, e.Rights); err != nil {
		return logerror(err)
	}
	// set exists
	e._exists = true
	return nil
}

// Delete deletes the [Employeeright] from the database.
func (e *Employeeright) Delete(ctx context.Context, db DB) error {
	switch {
	case !e._exists: // doesn't exist
		return nil
	case e._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.employeerights ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, e.ID)
	if _, err := db.ExecContext(ctx, sqlstr, e.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	e._deleted = true
	return nil
}

// EmployeerightByID retrieves a row from 'public.employeerights' as a [Employeeright].
//
// Generated from index 'employeerights_pkey'.
func EmployeerightByID(ctx context.Context, db DB, id int) (*Employeeright, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, employee, rights ` +
		`FROM public.employeerights ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	e := Employeeright{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&e.ID, &e.Employee, &e.Rights); err != nil {
		return nil, logerror(err)
	}
	return &e, nil
}
