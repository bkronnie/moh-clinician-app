package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Employee represents a row from 'public.employees'.
type Employee struct {
	ID             int            `json:"id"`             // id
	Fname          string         `json:"fname"`          // fname
	Lname          string         `json:"lname"`          // lname
	Oname          string         `json:"oname"`          // oname
	Title          sql.NullString `json:"title"`          // title
	Specialisation sql.NullString `json:"specialisation"` // specialisation
	Department     sql.NullInt64  `json:"department"`     // department
	Facility       sql.NullInt64  `json:"facility"`       // facility
	CreatedBy      sql.NullInt64  `json:"created_by"`     // created_by
	CreatedOn      sql.NullTime   `json:"created_on"`     // created_on
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Employee] exists in the database.
func (e *Employee) Exists() bool {
	return e._exists
}

// Deleted returns true when the [Employee] has been marked for deletion
// from the database.
func (e *Employee) Deleted() bool {
	return e._deleted
}

// Insert inserts the [Employee] to the database.
func (e *Employee) Insert(ctx context.Context, db DB) error {
	switch {
	case e._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case e._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.employees (` +
		`fname, lname, oname, title, specialisation, department, facility, created_by, created_on` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) RETURNING id`
	// run
	logf(sqlstr, e.Fname, e.Lname, e.Oname, e.Title, e.Specialisation, e.Department, e.Facility, e.CreatedBy, e.CreatedOn)
	if err := db.QueryRowContext(ctx, sqlstr, e.Fname, e.Lname, e.Oname, e.Title, e.Specialisation, e.Department, e.Facility, e.CreatedBy, e.CreatedOn).Scan(&e.ID); err != nil {
		return logerror(err)
	}
	// set exists
	e._exists = true
	return nil
}

// Update updates a [Employee] in the database.
func (e *Employee) Update(ctx context.Context, db DB) error {
	switch {
	case !e._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case e._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.employees SET ` +
		`fname = $1, lname = $2, oname = $3, title = $4, specialisation = $5, department = $6, facility = $7, created_by = $8, created_on = $9 ` +
		`WHERE id = $10`
	// run
	logf(sqlstr, e.Fname, e.Lname, e.Oname, e.Title, e.Specialisation, e.Department, e.Facility, e.CreatedBy, e.CreatedOn, e.ID)
	if _, err := db.ExecContext(ctx, sqlstr, e.Fname, e.Lname, e.Oname, e.Title, e.Specialisation, e.Department, e.Facility, e.CreatedBy, e.CreatedOn, e.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Employee] to the database.
func (e *Employee) Save(ctx context.Context, db DB) error {
	if e.Exists() {
		return e.Update(ctx, db)
	}
	return e.Insert(ctx, db)
}

// Upsert performs an upsert for [Employee].
func (e *Employee) Upsert(ctx context.Context, db DB) error {
	switch {
	case e._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.employees (` +
		`id, fname, lname, oname, title, specialisation, department, facility, created_by, created_on` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`fname = EXCLUDED.fname, lname = EXCLUDED.lname, oname = EXCLUDED.oname, title = EXCLUDED.title, specialisation = EXCLUDED.specialisation, department = EXCLUDED.department, facility = EXCLUDED.facility, created_by = EXCLUDED.created_by, created_on = EXCLUDED.created_on `
	// run
	logf(sqlstr, e.ID, e.Fname, e.Lname, e.Oname, e.Title, e.Specialisation, e.Department, e.Facility, e.CreatedBy, e.CreatedOn)
	if _, err := db.ExecContext(ctx, sqlstr, e.ID, e.Fname, e.Lname, e.Oname, e.Title, e.Specialisation, e.Department, e.Facility, e.CreatedBy, e.CreatedOn); err != nil {
		return logerror(err)
	}
	// set exists
	e._exists = true
	return nil
}

// Delete deletes the [Employee] from the database.
func (e *Employee) Delete(ctx context.Context, db DB) error {
	switch {
	case !e._exists: // doesn't exist
		return nil
	case e._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.employees ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, e.ID)
	if _, err := db.ExecContext(ctx, sqlstr, e.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	e._deleted = true
	return nil
}

// EmployeeByID retrieves a row from 'public.employees' as a [Employee].
//
// Generated from index 'employees_pkey'.
func EmployeeByID(ctx context.Context, db DB, id int) (*Employee, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, fname, lname, oname, title, specialisation, department, facility, created_by, created_on ` +
		`FROM public.employees ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	e := Employee{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&e.ID, &e.Fname, &e.Lname, &e.Oname, &e.Title, &e.Specialisation, &e.Department, &e.Facility, &e.CreatedBy, &e.CreatedOn); err != nil {
		return nil, logerror(err)
	}
	return &e, nil
}
