package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Indicator represents a row from 'public.indicators'.
type Indicator struct {
	ID        int           `json:"id"`         // id
	Indicator string        `json:"indicator"`  // indicator
	CreatedBy sql.NullInt64 `json:"created_by"` // created_by
	CreatedOn sql.NullTime  `json:"created_on"` // created_on
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Indicator] exists in the database.
func (i *Indicator) Exists() bool {
	return i._exists
}

// Deleted returns true when the [Indicator] has been marked for deletion
// from the database.
func (i *Indicator) Deleted() bool {
	return i._deleted
}

// Insert inserts the [Indicator] to the database.
func (i *Indicator) Insert(ctx context.Context, db DB) error {
	switch {
	case i._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case i._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.indicators (` +
		`indicator, created_by, created_on` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`
	// run
	logf(sqlstr, i.Indicator, i.CreatedBy, i.CreatedOn)
	if err := db.QueryRowContext(ctx, sqlstr, i.Indicator, i.CreatedBy, i.CreatedOn).Scan(&i.ID); err != nil {
		return logerror(err)
	}
	// set exists
	i._exists = true
	return nil
}

// Update updates a [Indicator] in the database.
func (i *Indicator) Update(ctx context.Context, db DB) error {
	switch {
	case !i._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case i._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.indicators SET ` +
		`indicator = $1, created_by = $2, created_on = $3 ` +
		`WHERE id = $4`
	// run
	logf(sqlstr, i.Indicator, i.CreatedBy, i.CreatedOn, i.ID)
	if _, err := db.ExecContext(ctx, sqlstr, i.Indicator, i.CreatedBy, i.CreatedOn, i.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Indicator] to the database.
func (i *Indicator) Save(ctx context.Context, db DB) error {
	if i.Exists() {
		return i.Update(ctx, db)
	}
	return i.Insert(ctx, db)
}

// Upsert performs an upsert for [Indicator].
func (i *Indicator) Upsert(ctx context.Context, db DB) error {
	switch {
	case i._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.indicators (` +
		`id, indicator, created_by, created_on` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`indicator = EXCLUDED.indicator, created_by = EXCLUDED.created_by, created_on = EXCLUDED.created_on `
	// run
	logf(sqlstr, i.ID, i.Indicator, i.CreatedBy, i.CreatedOn)
	if _, err := db.ExecContext(ctx, sqlstr, i.ID, i.Indicator, i.CreatedBy, i.CreatedOn); err != nil {
		return logerror(err)
	}
	// set exists
	i._exists = true
	return nil
}

// Delete deletes the [Indicator] from the database.
func (i *Indicator) Delete(ctx context.Context, db DB) error {
	switch {
	case !i._exists: // doesn't exist
		return nil
	case i._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.indicators ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, i.ID)
	if _, err := db.ExecContext(ctx, sqlstr, i.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	i._deleted = true
	return nil
}

// IndicatorByID retrieves a row from 'public.indicators' as a [Indicator].
//
// Generated from index 'indicators_pkey'.
func IndicatorByID(ctx context.Context, db DB, id int) (*Indicator, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, indicator, created_by, created_on ` +
		`FROM public.indicators ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	i := Indicator{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&i.ID, &i.Indicator, &i.CreatedBy, &i.CreatedOn); err != nil {
		return nil, logerror(err)
	}
	return &i, nil
}
