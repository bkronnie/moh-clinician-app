package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"strconv"
)

// Facility represents a row from 'public.facilities'.
type Facility struct {
	FacilityID        int64           `json:"facilityid"`         // id
	FacilityName     string        `json:"facility_name"`     // f_name
	FacilityLevel    string        `json:"facility_level"`    // f_level
	FacilityLg       sql.NullInt64 `json:"f_lg"`       // f_lg
	FacilityCreatedBy sql.NullInt64 `json:"created_by"` // created_by
	FacilityCreatedOn sql.NullTime  `json:"created_on"` // created_on
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Facility] exists in the database.
func (f *Facility) Exists() bool {
	return f._exists
}

// Deleted returns true when the [Facility] has been marked for deletion
// from the database.
func (f *Facility) Deleted() bool {
	return f._deleted
}

// Insert inserts the [Facility] to the database.
func (f *Facility) Insert(ctx context.Context, db DB) error {
	switch {
	case f._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case f._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.facilities (` +
		`f_name, f_level, f_lg, created_by, created_on` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING id`
	// run
	logf(sqlstr, f.FacilityName, f.FacilityLevel, f.FacilityLg, f.FacilityCreatedBy, f.FacilityCreatedOn)
	if err := db.QueryRowContext(ctx, sqlstr, f.FacilityName, f.FacilityLevel, f.FacilityLg, f.FacilityCreatedBy, f.FacilityCreatedOn).Scan(&f.FacilityID); err != nil {
		return logerror(err)
	}
	// set exists
	f._exists = true
	return nil
}

// Update updates a [Facility] in the database.
func (f *Facility) Update(ctx context.Context, db DB) error {
	switch {
	case !f._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case f._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.facilities SET ` +
		`f_name = $1, f_level = $2, f_lg = $3, created_by = $4, created_on = $5 ` +
		`WHERE id = $6`
	// run
	logf(sqlstr, f.FacilityName, f.FacilityLevel, f.FacilityLg, f.FacilityCreatedBy, f.FacilityCreatedOn, f.FacilityID)
	if _, err := db.ExecContext(ctx, sqlstr, f.FacilityName, f.FacilityLevel, f.FacilityLg, f.FacilityCreatedBy, f.FacilityCreatedOn, f.FacilityID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Facility] to the database.
func (f *Facility) Save(ctx context.Context, db DB) error {
	if f.Exists() {
		return f.Update(ctx, db)
	}
	return f.Insert(ctx, db)
}

// Upsert performs an upsert for [Facility].
func (f *Facility) Upsert(ctx context.Context, db DB) error {
	switch {
	case f._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.facilities (` +
		`id, f_name, f_level, f_lg, created_by, created_on` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`f_name = EXCLUDED.f_name, f_level = EXCLUDED.f_level, f_lg = EXCLUDED.f_lg, created_by = EXCLUDED.created_by, created_on = EXCLUDED.created_on `
	// run
	logf(sqlstr, f.FacilityID, f.FacilityName, f.FacilityLevel, f.FacilityLg, f.FacilityCreatedBy, f.FacilityCreatedOn)
	if _, err := db.ExecContext(ctx, sqlstr, f.FacilityID, f.FacilityName, f.FacilityLevel, f.FacilityLg, f.FacilityCreatedBy, f.FacilityCreatedOn); err != nil {
		return logerror(err)
	}
	// set exists
	f._exists = true
	return nil
}

// Delete deletes the [Facility] from the database.
func (f *Facility) Delete(ctx context.Context, db DB) error {
	switch {
	case !f._exists: // doesn't exist
		return nil
	case f._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.facilities ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, f.FacilityID)
	if _, err := db.ExecContext(ctx, sqlstr, f.FacilityID); err != nil {
		return logerror(err)
	}
	// set deleted
	f._deleted = true
	return nil
}

// FacilityByID retrieves a row from 'public.facilities' as a [Facility].
//
// Generated from index 'facilities_pkey'.
func FacilityByID(ctx context.Context, db DB, id int) (*Facility, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, f_name, f_level, f_lg, created_by, created_on ` +
		`FROM public.facilities ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	f := Facility{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&f.FacilityID, &f.FacilityName, &f.FacilityLevel, &f.FacilityLg, &f.FacilityCreatedBy, &f.FacilityCreatedOn); err != nil {
		return nil, logerror(err)
	}
	return &f, nil
}



func Facilitys(ctx context.Context, db DB, flt string, start int, cnt int) ([]*Facility, error) {
	var sqlstr, whereString string

	whereString = ""
	if flt!= "" {
        whereString = "WHERE " + flt
    }

	lmt := ""
	if cnt > 0 {
		lmt = " LIMIT " + strconv.Itoa(start)  + " " + strconv.Itoa(cnt) 
	} 

	sqlstr = `SELECT ` +
				`id, d_name ` +
				`FROM public.departments ` + whereString + lmt
	
	rows, err := db.QueryContext(ctx,sqlstr)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	facilitys := []*Facility{}

	for rows.Next() {
		f := &Facility{}
		err = rows.Scan(
			&f.FacilityID, 
			&f.FacilityName, 
			&f.FacilityLevel, 
			&f.FacilityLg, 
			&f.FacilityCreatedBy, 
			&f.FacilityCreatedOn,
		)

		if err != nil {
		return nil, err
		}

		facilitys = append(facilitys, f)
	}

	if err = rows.Err(); err != nil {
		return nil, err
	}

	return facilitys, nil
	
}
