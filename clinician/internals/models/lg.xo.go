package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Lg represents a row from 'public.lg'.
type Lg struct {
	ID     int            `json:"id"`      // id
	LgName sql.NullString `json:"lg_name"` // lg_name
	LgType sql.NullString `json:"lg_type"` // lg_type
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Lg] exists in the database.
func (l *Lg) Exists() bool {
	return l._exists
}

// Deleted returns true when the [Lg] has been marked for deletion
// from the database.
func (l *Lg) Deleted() bool {
	return l._deleted
}

// Insert inserts the [Lg] to the database.
func (l *Lg) Insert(ctx context.Context, db DB) error {
	switch {
	case l._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case l._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.lg (` +
		`lg_name, lg_type` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING id`
	// run
	logf(sqlstr, l.LgName, l.LgType)
	if err := db.QueryRowContext(ctx, sqlstr, l.LgName, l.LgType).Scan(&l.ID); err != nil {
		return logerror(err)
	}
	// set exists
	l._exists = true
	return nil
}

// Update updates a [Lg] in the database.
func (l *Lg) Update(ctx context.Context, db DB) error {
	switch {
	case !l._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case l._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.lg SET ` +
		`lg_name = $1, lg_type = $2 ` +
		`WHERE id = $3`
	// run
	logf(sqlstr, l.LgName, l.LgType, l.ID)
	if _, err := db.ExecContext(ctx, sqlstr, l.LgName, l.LgType, l.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Lg] to the database.
func (l *Lg) Save(ctx context.Context, db DB) error {
	if l.Exists() {
		return l.Update(ctx, db)
	}
	return l.Insert(ctx, db)
}

// Upsert performs an upsert for [Lg].
func (l *Lg) Upsert(ctx context.Context, db DB) error {
	switch {
	case l._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.lg (` +
		`id, lg_name, lg_type` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`lg_name = EXCLUDED.lg_name, lg_type = EXCLUDED.lg_type `
	// run
	logf(sqlstr, l.ID, l.LgName, l.LgType)
	if _, err := db.ExecContext(ctx, sqlstr, l.ID, l.LgName, l.LgType); err != nil {
		return logerror(err)
	}
	// set exists
	l._exists = true
	return nil
}

// Delete deletes the [Lg] from the database.
func (l *Lg) Delete(ctx context.Context, db DB) error {
	switch {
	case !l._exists: // doesn't exist
		return nil
	case l._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.lg ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, l.ID)
	if _, err := db.ExecContext(ctx, sqlstr, l.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	l._deleted = true
	return nil
}

// LgByID retrieves a row from 'public.lg' as a [Lg].
//
// Generated from index 'lg_pkey'.
func LgByID(ctx context.Context, db DB, id int) (*Lg, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, lg_name, lg_type ` +
		`FROM public.lg ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	l := Lg{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&l.ID, &l.LgName, &l.LgType); err != nil {
		return nil, logerror(err)
	}
	return &l, nil
}
