package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Target represents a row from 'public.targets'.
type Target struct {
	ID        int           `json:"id"`         // id
	Indicator sql.NullInt64 `json:"indicator"`  // indicator
	Target    sql.NullInt64 `json:"target"`     // target
	CreatedBy sql.NullInt64 `json:"created_by"` // created_by
	CreatedOn sql.NullTime  `json:"created_on"` // created_on
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Target] exists in the database.
func (t *Target) Exists() bool {
	return t._exists
}

// Deleted returns true when the [Target] has been marked for deletion
// from the database.
func (t *Target) Deleted() bool {
	return t._deleted
}

// Insert inserts the [Target] to the database.
func (t *Target) Insert(ctx context.Context, db DB) error {
	switch {
	case t._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case t._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.targets (` +
		`indicator, target, created_by, created_on` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`
	// run
	logf(sqlstr, t.Indicator, t.Target, t.CreatedBy, t.CreatedOn)
	if err := db.QueryRowContext(ctx, sqlstr, t.Indicator, t.Target, t.CreatedBy, t.CreatedOn).Scan(&t.ID); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Update updates a [Target] in the database.
func (t *Target) Update(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case t._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.targets SET ` +
		`indicator = $1, target = $2, created_by = $3, created_on = $4 ` +
		`WHERE id = $5`
	// run
	logf(sqlstr, t.Indicator, t.Target, t.CreatedBy, t.CreatedOn, t.ID)
	if _, err := db.ExecContext(ctx, sqlstr, t.Indicator, t.Target, t.CreatedBy, t.CreatedOn, t.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Target] to the database.
func (t *Target) Save(ctx context.Context, db DB) error {
	if t.Exists() {
		return t.Update(ctx, db)
	}
	return t.Insert(ctx, db)
}

// Upsert performs an upsert for [Target].
func (t *Target) Upsert(ctx context.Context, db DB) error {
	switch {
	case t._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.targets (` +
		`id, indicator, target, created_by, created_on` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`indicator = EXCLUDED.indicator, target = EXCLUDED.target, created_by = EXCLUDED.created_by, created_on = EXCLUDED.created_on `
	// run
	logf(sqlstr, t.ID, t.Indicator, t.Target, t.CreatedBy, t.CreatedOn)
	if _, err := db.ExecContext(ctx, sqlstr, t.ID, t.Indicator, t.Target, t.CreatedBy, t.CreatedOn); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Delete deletes the [Target] from the database.
func (t *Target) Delete(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return nil
	case t._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.targets ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, t.ID)
	if _, err := db.ExecContext(ctx, sqlstr, t.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	t._deleted = true
	return nil
}

// TargetByID retrieves a row from 'public.targets' as a [Target].
//
// Generated from index 'targets_pkey'.
func TargetByID(ctx context.Context, db DB, id int) (*Target, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, indicator, target, created_by, created_on ` +
		`FROM public.targets ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	t := Target{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&t.ID, &t.Indicator, &t.Target, &t.CreatedBy, &t.CreatedOn); err != nil {
		return nil, logerror(err)
	}
	return &t, nil
}
