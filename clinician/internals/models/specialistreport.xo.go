package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"fmt"
	"log"
	
)

// SpecialistReport struct to hold summarized data
type SpecialistReport struct {
	EmpID int
	StaffName                   string
	Title                  string
	HFName string
	DaysWorked             sql.NullInt64
	WardRounds             sql.NullInt64
	SurgeriesConducted     sql.NullInt64
	SpecializedClinics     sql.NullInt64
	StudentTeaching        sql.NullInt64
}

// GetWeeklyReportSummary fetches summarized data from the weeklyreport table
func GetWeeklyReportSummary(ctx context.Context, db *sql.DB, hfid int) ([]SpecialistReport, error) {
	log.Printf("GetWeeklyReportSummary fxn")

	query := `
		SELECT e.id, CONCAT(e.fname,' ', e.lname) as staff_name, f.f_name, st.title,
		       SUM(w.qn_01) AS days_worked, 
		       SUM(w.qn_02) AS ward_rounds, 
		       SUM(w.qn_05 + w.qn_06) AS surgeries, 
		       SUM(w.qn_08) AS specialized_clinics, 
		       SUM(w.qn_11) AS student_teaching
		FROM public.weeklyreport w
		JOIN public.employees e ON w.employee = e.id
		JOIN public.specialist_titles st ON st.id = e.title
		JOIN public.facilities f ON f.id = e.facility
		WHERE e.facility = $1
		GROUP BY f.f_name, e.id, e.fname, st.title
		ORDER BY e.id;
	`

	rows, err := db.QueryContext(ctx, query, hfid)
	if err != nil {
		return nil, fmt.Errorf("error fetching weekly report summary: %w", err)
	}
	defer rows.Close()

	var reports []SpecialistReport
	for rows.Next() {
		var r SpecialistReport
		if err := rows.Scan(&r.EmpID, &r.StaffName, &r.HFName, &r.Title, &r.DaysWorked, &r.WardRounds, &r.SurgeriesConducted, &r.SpecializedClinics, &r.StudentTeaching); err != nil {
			return nil, fmt.Errorf("error scanning row: %w", err)
		}
		reports = append(reports, r)
	}

	if err = rows.Err(); err != nil {
		return nil, fmt.Errorf("error iterating rows: %w", err)
	}

	return reports, nil
}
